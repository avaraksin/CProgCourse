@page "/lcustpage"

@inject CtrlLCust _ctrlcust
@inject CtrlUserCond _userCond

<h3>Отгрузки</h3>


<MudTable Items="@maindata" Hover="true" 
    Breakpoint="MudBlazor.Breakpoint.Sm" 
    @ref="mudTable" 
    T="LCust"
    Bordered="true"
    Striped="true"
    Dense
    CustomHeader="true">

        <HeaderContent>
            <MudTHeadRow Class="header-centered">
                <MudTh Class="header-centered">№№</MudTh>
                @for (var i = 0; i < fields.Count; i ++)
                {
                    var fld = fields[i];
                    <MudTh>@fld</MudTh>
                }
            </MudTHeadRow>
        </HeaderContent>
        
        <RowTemplate>
            <MudTd DataLabel="ID">@(maindata.IndexOf(context) + 1)</MudTd>
                @for (var i = 0; i < fields.Count; i ++)
                {
                    var fld = fields[i];
                    <MudTd DataLabel="@fld">@_ctrlcust.GetListField(context, fld)</MudTd>
                }
        </RowTemplate>
    </MudTable>

    @code {
    List<LCust> maindata = null;
    List<string>? fields = null;

    MudTable<LCust> mudTable;

    [CascadingParameter]
    UserProvider userProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        userProvider.displayForm = FormOnDisplay.FormLCust;
        maindata = await _ctrlcust.GetlCust(userProvider.CurrentBase.Id);

        fields = _userCond.GetVisibleFields(userProvider.CurrentClientNum, userProvider.CurrentUser.id, "lCust", out _);

        base.OnInitialized();
    }

}
