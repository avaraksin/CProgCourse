@page "/mudpage/{Page:int}"

@using System;
@using System.Globalization;
@using System.Reflection;

@inject ICtrlLists? _clists
@inject ICtrlListname _cln
@inject UserConnectionData userConnection

<h3>Справочники</h3>


@if (lst == null || lst.Count == 0)
{
    return;
}

    
    <MudPaper Height="50px" Width="300px" Elevation="1">
        <MudSelect Margin="MudBlazor.Margin.Dense" T="Lists" Label="Укажите справочник" 
    Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" FullWidth = "false"
    @bind-Value="@listSelected" SelectedValuesChanged = "@OnChanged">
            @foreach (var l in lst)
            {
                <MudSelectItem T="Lists" Value="@(l)">@l.Name</MudSelectItem>
            }
        </MudSelect></MudPaper>
    
    <p></p>
    <style>
        .selected {
        background-color: #1E88E5 !important;
        }

        .selected > td {
        color: white !important;
        }

        .selected > td .mud-input {
        color: white !important;
        }
    </style>
    <MudTable Items="@ln" Hover="true" 
    Breakpoint="MudBlazor.Breakpoint.Sm" 
    @ref="mudTable" 
    OnRowClick="RowClickEvent" ondblclick = "@( (async() =>TableDblClick()))"
    RowClassFunc="@SelectedRowClassFunc" T="Listname"
    Bordered="true"
    Striped="true"
    Dense
    CustomHeader="true">

        <HeaderContent>
            <MudTHeadRow Class="header-centered">
                <MudTh Class="header-centered">№№</MudTh>
                <MudTh>Наименование</MudTh>
                <MudTh>Комметарий</MudTh>
                <MudTh>User</MudTh>
                <MudTh>Дата</MudTh>
            </MudTHeadRow>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="##">@(ln.IndexOf(context) + 1)</MudTd>
            <MudTd DataLabel="Наименование">@context.Name</MudTd>
            <MudTd DataLabel="Комментарий">@context.Comment</MudTd>
            <MudTd DataLabel="User">@context?.user?.Shortname</MudTd>
            <MudTd DataLabel="Дата модификации">@GetDateString(context.chdate)</MudTd>
        </RowTemplate>
    </MudTable>
   

@code {
    [Parameter]
    public int Page { get; set;}

    [Parameter]
    public MudPage mudPage { get; set; } 

    [CascadingParameter]
    private UserProvider? UserProvider { get; set; }


    private int ClNum { get; set; }

    List<Lists> lst = new List<Lists>();
    Lists? listSelected { get; set; } 

    // ***********************************************
    List<Listname> ln = new List<Listname>();
    private int selectedRowNumber = -1;
    private MudTable<Listname> mudTable;

    // ***********************************************

    [Parameter]
    public EventCallback OnDblClickCallback { get; set; }


    private Users currentUser = new();

    protected override Task OnInitializedAsync()
    {
        if (UserProvider != null)
        {
            ClNum = UserProvider.CurrentClientNum;

            lst = _clists?.GetLists(ClNum);
            listSelected = _clists?.GetLists(ClNum, UserProvider.ListId > 0 ? UserProvider.ListId : 1);
            ln = _cln.GetListname(ClNum, listSelected != null ? listSelected.id : 1);

            UserProvider.displayForm = FormOnDisplay.FormListname;
        }
        else
        {
            ClNum = 0;
            lst = _clists?.GetLists(ClNum);
            listSelected = _clists?.GetLists(ClNum, 1);
            ln = _cln.GetListname(ClNum, 1);
        }
        currentUser = UserProvider.CurrentUser;

        return base.OnInitializedAsync();
    }

    protected override Task OnParametersSetAsync()
    {
        ClNum = UserProvider.CurrentClientNum;
        currentUser = UserProvider.CurrentUser;
        Refresh();
        return base.OnParametersSetAsync();
    }

    private void Refresh()
    {
        lst = _clists?.GetLists(ClNum);
        if (listSelected == null && lst?.Count > 0) listSelected = lst.First(x => x.clnum == ClNum && x.id == UserProvider.ListId);
        ln = _cln.GetListname(ClNum, listSelected != null ? listSelected.id : 1);
        UserProvider.SelectedListname = null;
    }


    private async Task OnChanged()
    {
        UserProvider.ListId = listSelected.id;
        UserProvider.SaveChangesAsync();
        Refresh();
    }

    private string SelectedRowClassFunc(Listname element, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(element))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    private void RowClickEvent(TableRowClickEventArgs<Listname> tableRowClickEventArgs)
    {
        UserProvider.SelectedListname = mudTable.SelectedItem;
    }



    async Task TableDblClick()
    {
        UserProvider.SelectedListname.cuser = UserProvider.CurrentUser.id;
        if (await userConnection.CorrectElement(mudTable.SelectedItem))
        {
            StateHasChanged();
            Refresh();
        }
    }

    string GetDateString(DateTime? dt)
    {
        return dt?.ToShortDateString();
    }

}
