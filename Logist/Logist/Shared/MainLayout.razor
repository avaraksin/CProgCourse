@using MudBlazor

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AppStatus _appStatus

@inject CtrlUsers _cuser




<PageTitle>Logist</PageTitle>

<div class="page">
    
    <main>

        <MudAppBar Color="Color.Info" Fixed="false" Elevation="0" Dense = "true">
        <MudGrid Spacing="@spacing" Justify="Justify.FlexStart">
        <MudItem>
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" /> </MudItem>
        </MudGrid>
        <MudSpacer/>
        @if (UserProvider != null)
        {
            <MudGrid Spacing="@spacing" Justify="Justify.FlexEnd">
            @if (UserProvider.CurrentBase != null)
            {
                <div class="d-flex justify-center align-center">
                    <MudItem ><MudText>База: <b>@(UserProvider.CurrentBase?.ClientName). </b></MudText> </MudItem>
                </div>
            }    
            @if (UserProvider.CurrentUser != null)   
            {
                <div class="d-flex justify-center align-center">
                <MudItem><MudText> &nbsp;&nbsp;&nbsp;Пользователь: <b>@(UserProvider.CurrentUser?.name).</b></MudText></MudItem>
                </div>
            }
            </MudGrid>
        }
               

   
        </MudAppBar> 

        <article class="content px-4">
            @Body
        </article>
        

        <MudThemeProvider/>
        <MudDialogProvider/>
        <MudSnackbarProvider/>
    </main>
</div>



@code {
    private int spacing { get; set; } = 2;
    
    [CascadingParameter]
    private UserProvider? UserProvider { get; set; }

    private int CLNUM { get; set; }
    private Users currentUser { get; set; } = new Users();
    private List<Users> users;

    public string email;
    //public IMask emailMask = RegexMask.Email();

    protected override async Task OnInitializedAsync()
    {
        CLNUM = UserProvider.CurrentClientNum;
        currentUser = UserProvider.CurrentUser;

        //users = _cuser.GetUsers();
        //if (currentUser != null) currentUser = users?.FirstOrDefault(x => x.id == currentUser.id);

        await base.OnInitializedAsync();
    }

    private async Task OnChanged()
    {
        UserProvider.CurrentClientNum = CLNUM;
        UserProvider.CurrentUser = currentUser;
        UserProvider.SaveChangesAsync();


        _appStatus.clnum = CLNUM;
        //_appStatus.UpdateState();

        int r =  (int)(100 * new Random().Next());
        NavigationManager.NavigateTo($"/mudpage/{r}");
    }

    
}
