@using MudBlazor

@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AppStatus _appStatus
@implements IDisposable



<PageTitle>Logist</PageTitle>

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row">
<!-- ************************************************************************************************** -->           
        <MudPaper Height="50px" Width="300px" Elevation="1">
            <MudSelect Margin="MudBlazor.Margin.Dense" T="int" Label="Укажите номер клиента" 
                Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" FullWidth = "false"
                @bind-Value="@CLNUM" SelectedValuesChanged = "@OnChanged">
        @for (int i = 1; i <=6; i++)
        {
            int index = i;
            <MudSelectItem T="int" Value="@index" />
        }


        </MudSelect></MudPaper>
<!-- ************************************************************************************************** -->
        </div>

        <article class="content px-4">
            @Body
        </article>

        <MudThemeProvider/>
        <MudDialogProvider/>
        <MudSnackbarProvider/>
    </main>
</div>

@code {
    private int CLNUM { get; set; }

    [CascadingParameter]
    private UserProvider? UserProvider { get; set; }

    protected override async Task OnInitializedAsync()
    {
        CLNUM = UserProvider.CurrentClientNum;
        _appStatus.OnChange += StateHasChanged;
        _appStatus.clnum = CLNUM;
        await base.OnInitializedAsync();
    }

    void OnChanged()
    {
        _appStatus.clnum = CLNUM;
        _appStatus.UpdateState();

        UserProvider.CurrentClientNum = CLNUM;
        UserProvider.SaveChangesAsync();
    }

     public void Dispose() 
    {
        _appStatus.OnChange -= StateHasChanged;
    }
}
