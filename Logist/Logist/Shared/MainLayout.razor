@using MudBlazor

@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject AppStatus _appStatus

@inject UserConnectionData userConnection

<MudLayout>

<PageTitle>Logist</PageTitle>
<div class="page">
    
    <main>
        <MudDrawerContainer Class="mud-height-full">
        <MudAppBar Color="Color.Info" Fixed="false" Elevation="0" Dense = "false">
        <MudGrid Spacing="@spacing" Justify="Justify.FlexStart">
        <MudItem>
    <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick = "@ControlDrawer"/> </MudItem>
        
        @if (true)
        {
            <MudItem><MudFab Color="MudBlazor.Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" Size="MudBlazor.Size.Small" 
                    OnClick = "@(async () => await AddElement())"/></MudItem>
            <MudItem><MudFab Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="MudBlazor.Size.Small" 
                    OnClick = "@(async () => await CorrectElement())"/></MudItem>
            <MudItem><MudFab Color="MudBlazor.Color.Error" StartIcon="@Icons.Material.Filled.Delete" Size="MudBlazor.Size.Small"
                    OnClick = "@(async () => await DeleteElement())"/></MudItem>          
        }
     </MudGrid>   
        <MudSpacer/>
        
        @if (UserProvider != null)
        {
            <MudGrid Spacing="@spacing" Justify="Justify.FlexEnd">
            @if (UserProvider.CurrentBase != null)
            {
                <div class="d-flex justify-center align-center">
                    <MudItem ><MudText>База: <b>@(UserProvider.CurrentBase?.ClientName). </b></MudText> </MudItem>
                </div>
            }    
            @if (UserProvider.CurrentUser != null)   
            {
                <div class="d-flex justify-center align-center">
                <MudItem><MudText> &nbsp;&nbsp;&nbsp;Пользователь: <b>@(UserProvider.CurrentUser?.name).</b></MudText></MudItem>
                </div>
            }
            </MudGrid>
        }
   
        </MudAppBar> 
        
        <MudDrawer @bind-Open="@open" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
        
        <MudNavMenu>
            <MudNavMenu>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Home"  IconColor = "@Color.Primary" Href = "/">Главная</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.List"  IconColor = "@Color.Primary" Href="/listnamepage/3">Справочники</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All" Icon="@Icons.Filled.Group" IconColor = "@Color.Primary" Href="/userpage/1">Пользователи</MudNavLink>
                <MudNavLink Match="NavLinkMatch.All"  IconColor = "@Color.Primary" Href="/lcustpage">Отгрузки</MudNavLink>
            </MudNavMenu>
        </MudNavMenu>
       
    </MudDrawer>
   
        <div >
        <!--article class="content px-4"-->
            @Body
        <!--/!--article -->
        </div>
        

        <MudThemeProvider/>
        <MudDialogProvider/>
        <MudSnackbarProvider/>
         </MudDrawerContainer>
    </main>
</div>

</MudLayout>


@code {
    private int spacing { get; set; } = 1;
    private bool open { get; set; }


    [CascadingParameter]
    private UserProvider? UserProvider { get; set; }

    void ControlDrawer() => open = !open;


    private int CLNUM { get; set; }
    private Users currentUser { get; set; } = new Users();
    private List<Users> users;


    protected override async Task OnInitializedAsync()
    {
        CLNUM = UserProvider.CurrentClientNum;
        currentUser = UserProvider.CurrentUser;

        await base.OnInitializedAsync();
    }

    public async Task AddElement()
    {
        if (UserProvider == null)
        {
            return;
        }

        if (UserProvider.displayForm == FormOnDisplay.FormListname)
        {
            Listname listname = new()
            {
                clnum = UserProvider.CurrentBase.Id,
                Idlist = UserProvider.ListId,
                id = 0,
                cuser = UserProvider.CurrentUser.id
            };
            if (await userConnection.CorrectElement(listname))
            {
                navigationManager.NavigateTo($"/listnamepage/{(int) new Random().Next()}");
            }
        }
        else if (UserProvider.displayForm == FormOnDisplay.FormUsers)
        {
            Users user = new()
            {
                clnum = UserProvider.CurrentBase.Id,
                SECLEVEL = 1,
                isdel = -1,
                AdminUser = UserProvider.CurrentUser.Shortname,
                cuser = UserProvider.CurrentUser.id
            };
            
            if (await userConnection.CorrectElement(user))
            {
                navigationManager.NavigateTo($"/userpage/{(int) new Random().Next()}");
            }

        }
    }

    public async Task CorrectElement()
    {
        if (UserProvider == null)
        {
            return;
        }

        if (UserProvider.displayForm == FormOnDisplay.FormListname)
        {
            if (UserProvider.SelectedListname != null)
            {
                UserProvider.SelectedListname.cuser = UserProvider.CurrentUser.id;
                if (await userConnection.CorrectElement(UserProvider.SelectedListname) )
                {
                    navigationManager.NavigateTo($"/listnamepage/{(int) new Random().Next()}");
                }
            }
            await Task.CompletedTask;
        }
    }

    public async Task DeleteElement()
    {
        if (UserProvider == null)
        {
            return;
        }

        if (UserProvider.displayForm == FormOnDisplay.FormListname)
        {
            if (UserProvider.SelectedListname != null)
            {
                UserProvider.SelectedListname.cuser = UserProvider?.CurrentUser?.id;
                if (await userConnection.DeleteElement(UserProvider?.SelectedListname))
                {
                    navigationManager.NavigateTo($"/listnamepage/{(int) new Random().Next()}");
                }
            }
        }
        if (UserProvider.displayForm == FormOnDisplay.FormUsers)
        {
            if (UserProvider.SelectedUser != null)
            {
                UserProvider.SelectedUser.cuser = UserProvider?.CurrentUser?.id;
                if (await userConnection.DeleteElement(UserProvider?.SelectedUser))
                {
                    navigationManager.NavigateTo($"/userpage/{(int) new Random().Next()}");
                }
            }
        }

    }

    //public async Task TestUserDialog()
    //{
    //    await userConnection.CorrectElement(UserProvider.CurrentUser);
    //}
}
